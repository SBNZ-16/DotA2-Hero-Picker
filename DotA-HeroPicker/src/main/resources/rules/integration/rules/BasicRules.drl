package rules.heroes;
 
import com.heropicker.facts.heroes.HeroBannedFact;
import com.heropicker.facts.heroes.AllyHeroPickedFact;
import com.heropicker.facts.heroes.EnemyHeroPickedFact;
import com.heropicker.facts.heroes.UpdateScoresFact;
import com.heropicker.facts.heroes.HeroPreferredFact;
import com.heropicker.facts.heroes.RolePreferredFact;
import com.heropicker.facts.heroes.LanePreferredFact;
import com.heropicker.model.heroes.PickedAllyHeroes;
import com.heropicker.model.heroes.HeroRecommendation;
import com.heropicker.model.heroes.LaneStats;
import com.heropicker.model.heroes.Hero;


global com.heropicker.model.heroes.HeroDatabase heroDatabase;
global com.heropicker.model.heroes.HeroRecommendationList heroRecommendationList;
global PickedAllyHeroes pickedAllyHeroes;

 
rule "Ally hero picked"
	agenda-group "hero-statistics"
	when
		$picked : AllyHeroPickedFact()
	then
		heroRecommendationList.removeHeroRecommendationByHeroId($picked.getHeroId());
		pickedAllyHeroes.addHero($picked.getHeroId());
end

rule "Hero banned"
	agenda-group "hero-statistics"
	when
		$banned : HeroBannedFact()
	then
		heroRecommendationList.removeHeroRecommendationByHeroId($banned.getHeroId());
end

rule "Sorting rule"
salience $score
	agenda-group "sort"
	when
		$heroRecommendation : HeroRecommendation($score : score) from heroRecommendationList.getHeroRecommendations()
	then
		heroRecommendationList.getSortedRecommendations().add($heroRecommendation);
		System.out.println($score);
end

rule "Find min and max score"
salience 1
	agenda-group "scale"
	when
		accumulate(HeroRecommendation($score : score) from heroRecommendationList.getHeroRecommendations(),
					$maxScore: max($score),
					$minScore: min($score))
	then
		heroRecommendationList.setMinScore($minScore.doubleValue());
		heroRecommendationList.setMaxScore($maxScore.doubleValue());
		System.out.println("find min max rule");
end

rule "Scaling rule"
	agenda-group "scale"
	when
		$heroRecommendation : HeroRecommendation($score : score) from heroRecommendationList.getHeroRecommendations()
	then
		double scoreRange = heroRecommendationList.getMaxScore() - heroRecommendationList.getMinScore();
		$heroRecommendation
				.setScore(($heroRecommendation.getScore() - heroRecommendationList.getMinScore()) / scoreRange * 100);
end

rule "Update score by heroId"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendation(hero.heroId==$heroId) from heroRecommendationList.getHeroRecommendations()
	then
		$heroRecommendation.updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());
end

rule "Update score by role"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendation(hero.roles contains $role) from heroRecommendationList.getHeroRecommendations()
	then
		$heroRecommendation.updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());
end

rule "Update score by lane"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendation($hero : hero) from heroRecommendationList.getHeroRecommendations()
		$laneStats: LaneStats(name == $lane) from $hero.lanes
	then
		double laneEffectiveness = ($laneStats.getWinrate() * $laneStats.getPresence());
		$heroRecommendation.updateScore((1+laneEffectiveness)*$updateScore.getMultiplyScale(),
		 $updateScore.getAddValue());
end

