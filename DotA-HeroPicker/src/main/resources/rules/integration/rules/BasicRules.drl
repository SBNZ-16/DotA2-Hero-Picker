package rules.heroes;
 
import com.heropicker.facts.heroes.HeroBannedFact;
import com.heropicker.facts.heroes.AllyHeroPickedFact;
import com.heropicker.facts.heroes.EnemyHeroPickedFact;
import com.heropicker.facts.heroes.UpdateScoresFact;
import com.heropicker.facts.heroes.HeroPreferredFact;
import com.heropicker.facts.heroes.RolePreferredFact;
import com.heropicker.facts.heroes.LanePreferredFact;
import com.heropicker.facts.heroes.MaxScoreFact;
import com.heropicker.facts.heroes.MinScoreFact;
import com.heropicker.facts.heroes.HeroRecommendationFact;
import com.heropicker.facts.heroes.ResultFact;
import com.heropicker.model.heroes.LaneStats;
import com.heropicker.model.heroes.Hero;
import com.heropicker.model.heroes.HeroDatabase;

import java.util.ArrayList;
import java.util.List;

global HeroDatabase heroDatabase;
 
rule "Ally hero picked"
	agenda-group "hero-statistics"
	when
		AllyHeroPickedFact($pickedId : heroId)
		$recommendation: HeroRecommendationFact(hero.heroId == $pickedId)
	then
		delete($recommendation);
end

rule "Enemy hero picked"
	agenda-group "hero-statistics"
	when
		EnemyHeroPickedFact($pickedId : heroId)
		$recommendation: HeroRecommendationFact(hero.heroId == $pickedId)
	then
		delete($recommendation);
end

rule "Hero banned"
	agenda-group "hero-statistics"
	when
		HeroBannedFact($bannedId : heroId)
		$recommendation: HeroRecommendationFact(hero.heroId == $bannedId)
	then
		delete($recommendation);
end

rule "Sorting rule"
salience ($score*100)
	agenda-group "sort"
	when
		$heroRecommendation : HeroRecommendationFact($score : score) @Watch(score)
		$resultFact : ResultFact()
	then
		System.out.println($heroRecommendation.getScore());
		$resultFact.getResult().add($heroRecommendation);
		update($resultFact);
		System.out.println($resultFact.getResult().size());
end

rule "Find min and max score"
	agenda-group "scale"
	when
		not MaxScoreFact()
		not MinScoreFact()
		accumulate(HeroRecommendationFact($score : score),
				$maxScore: max($score),
				$minScore: min($score))
	then
		insert(new MaxScoreFact($maxScore.doubleValue()));
		insert(new MinScoreFact($minScore.doubleValue()));
end

rule "Scaling rule"
	agenda-group "scale"
	when
		MaxScoreFact($maxScore: maxScore)
		MinScoreFact($minScore: minScore)
		$heroRecommendation : HeroRecommendationFact($score : score, scaled == false)
	then
		System.out.println($heroRecommendation.getScore());
		double scoreRange = $maxScore - $minScore;
		double newScore = ($heroRecommendation.getScore() - $minScore) / scoreRange * 100;
		modify($heroRecommendation) {setScaled(true), setScore(newScore);}
end

rule "Update score by heroId"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendationFact(hero.heroId==$heroId) @Watch(!*)
	then
		modify($heroRecommendation){updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());}
end

rule "Update score by role"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendationFact(hero.roles contains $role) @Watch(!*)
	then
		modify($heroRecommendation) {updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());}
end

rule "Update score by lane"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendationFact($hero : hero) @Watch(!*)
		$laneStats: LaneStats(name == $lane) from $hero.lanes
	then
		double laneEffectiveness = ($laneStats.getWinrate() * $laneStats.getPresence());
 		modify($heroRecommendation) {updateScore((1+laneEffectiveness)*$updateScore.getMultiplyScale(),
		 $updateScore.getAddValue());}
end

query "Get result"
  $result: ResultFact()
end

