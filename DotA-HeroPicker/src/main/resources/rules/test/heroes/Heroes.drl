package rules.heroes;
 
import com.heropicker.facts.heroes.HeroBannedFact;
import com.heropicker.facts.heroes.AllyHeroPickedFact;
import com.heropicker.facts.heroes.EnemyHeroPickedFact;
import com.heropicker.facts.heroes.UpdateScoresFact;
import com.heropicker.facts.heroes.HeroPreferredFact;
import com.heropicker.facts.heroes.RolePreferredFact;
import com.heropicker.facts.heroes.LanePreferredFact;
import com.heropicker.facts.heroes.MaxScoreFact;
import com.heropicker.facts.heroes.MinScoreFact;
import com.heropicker.facts.heroes.HeroRecommendationFact;
import com.heropicker.facts.heroes.ResultCollectionFact;
import com.heropicker.facts.heroes.ResultFact;
import com.heropicker.model.heroes.LaneStats;
import com.heropicker.model.heroes.Hero;
import com.heropicker.model.heroes.HeroDatabase;

import java.util.ArrayList;
import java.util.List;

global HeroDatabase heroDatabase;
 
rule "Ally hero picked"
	agenda-group "hero-statistics"
	when
		AllyHeroPickedFact($pickedId : heroId)
		$recommendation: HeroRecommendationFact(hero.heroId == $pickedId)
	then
		delete($recommendation);
end

rule "Enemy hero picked"
	agenda-group "hero-statistics"
	when
		EnemyHeroPickedFact($pickedId : heroId)
		$recommendation: HeroRecommendationFact(hero.heroId == $pickedId)
	then
		delete($recommendation);
end

rule "Hero banned"
	agenda-group "hero-statistics"
	when
		HeroBannedFact($bannedId : heroId)
		$recommendation: HeroRecommendationFact(hero.heroId == $bannedId)
	then
		delete($recommendation);
end



rule "Find min and max score"
	agenda-group "scale"
	when
		not MaxScoreFact()
		not MinScoreFact()
		accumulate(HeroRecommendationFact($score : score),
			$maxScore: max($score),
			$minScore: min($score)
		)
	then
		insert(new MaxScoreFact($maxScore.doubleValue()));
		insert(new MinScoreFact($minScore.doubleValue()));
end

rule "Scaling rule"
	agenda-group "scale"
	when
		MaxScoreFact($maxScore: maxScore)
		MinScoreFact($minScore: minScore)
		$heroRecommendation : HeroRecommendationFact($score : score)
	then
		double scoreRange = $maxScore - $minScore;
		double newScore = ($heroRecommendation.getScore() - $minScore) / scoreRange * 100;
		ResultFact resultFact = new ResultFact(newScore,
											   $heroRecommendation.getHero().getHeroId(),
											   $heroRecommendation.getHero().getHeroName());
		insert(resultFact);
end

rule "Sorting rule"
salience ($score*100)
	agenda-group "sort"
	when
		$resultFact : ResultFact($score : score)
		$resultCollectionFact : ResultCollectionFact()
	then
		$resultCollectionFact.getResult().add($resultFact);
end

rule "Update score by heroId"
	agenda-group "update"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendationFact(hero.heroId==$heroId) @Watch(!*)
	then
		modify($heroRecommendation){updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());}
end

rule "Update score by role"
	agenda-group "update"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendationFact(hero.roles contains $role) @Watch(!*)
	then
		modify($heroRecommendation) {updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());}
end

rule "Update score by lane"
	agenda-group "update"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendationFact($hero : hero) @Watch(!*)
		$laneStats: LaneStats(name == $lane) from $hero.lanes
	then
		double laneEffectiveness = ($laneStats.getWinrate() * $laneStats.getPresence());
 		modify($heroRecommendation) {updateScore((1+laneEffectiveness)*$updateScore.getMultiplyScale(),
		 $updateScore.getAddValue());}
end

query "Get result"
  $result: ResultCollectionFact()
end

query roleOverflow(String $role, Long $count)
	$allHeroIdsWithRole: List() from accumulate (Hero(roles contains $role, $id: heroId) from heroDatabase.heroes,
        collectList($id)
	)
	$count := Number() from accumulate(AllyHeroPickedFact($allHeroIdsWithRole contains heroId, $id: heroId),
		count($id)
	)
end

rule "Pusher role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Pusher", $count;)
	then
		double penalty = (1.5 - (double)$count) * 0.05;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Pusher", null));
end

rule "Disabler role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Disabler", $count;)
	then
		double penalty = (2.0 - (double)$count) * 0.025;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Disabler", null));
end

rule "Durable role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Durable", $count;)
	then
		double penalty = (1.5 - (double)$count) * 0.05;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Durable", null));
end

rule "Jungler role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Jungler", $count;)
	then
		double penalty = (0.5 - (double)$count) * 0.025;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Jungler", null));
end

rule "Carry role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Carry", $count;)
	then
		double penalty = (2.0 - (double)$count) * 0.05;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Carry", null));
end

rule "Initiator role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Initiator", $count;)
	then
		double penalty = (1.5 - (double)$count) * 0.05;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Initiator", null));
end

rule "Support role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Support", $count;)
	then
		double penalty = (2.0 - (double)$count) * 0.05;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Support", null));
end

rule "Escape role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Escape", $count;)
	then
		double penalty = (1.0 - (double)$count) * 0.025;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Escape", null));
end

rule "Nuker role"
	agenda-group "team-composition"
	salience -1
	when
		exists(AllyHeroPickedFact())
    	roleOverflow("Nuker", $count;)
	then
		double penalty = (1.0 - (double)$count) * 0.05;
		insert(new UpdateScoresFact(penalty + 1, 0, null, "Nuker", null));
end



rule "Enemy hero picked, update disadvantage"
	agenda-group "hero-statistics"
	when
		EnemyHeroPickedFact($pickedId: heroId)
		$recommendation: HeroRecommendationFact(hero.heroId != $pickedId)
	then
		double disadvantage = $recommendation.getHero().getDisadvantages().get($pickedId);
		$recommendation.setScore($recommendation.getScore() -  disadvantage * 1.5);
		update($recommendation);
end
rule "Enemy hero picked is expected to show in my lane"
	agenda-group "hero-statistics"
	when
		EnemyHeroPickedFact($pickedId: heroId, goingToFaceInLane == true)
		$recommendation: HeroRecommendationFact(hero.heroId != $pickedId)
	then
		double disadvantage = $recommendation.getHero().getDisadvantages().get($pickedId);
		$recommendation.setScore($recommendation.getScore() -  disadvantage * 3.0);
		update($recommendation);
end
rule "Hero preferred"
	agenda-group "preferences"
	when
		HeroPreferredFact($heroId : heroId)
	then
		insert(new UpdateScoresFact(1.3, 0, $heroId, null, null));
end
rule "Role preferred"
	agenda-group "preferences"
	when
		RolePreferredFact($role : role)
	then
		insert(new UpdateScoresFact(1.3, 0, null, $role, null));
end
rule "Lane preferred"
	agenda-group "preferences"
	when
		LanePreferredFact($lane : lane)
	then
		insert(new UpdateScoresFact(1.0, 0, null, null, $lane));
end



