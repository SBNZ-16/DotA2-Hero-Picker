package rules.test.items;
 
import com.heropicker.facts.items.BoughtItemCollectionFact;
import com.heropicker.facts.items.BoughtItemFact;
import com.heropicker.facts.items.ItemHierarchyFact;
import com.heropicker.facts.items.WantedItemFact;

global Integer balance;
global String wantedItem;

query isContainedIn( String child, String parent, ItemHierarchyFact retVal)
  retVal := ItemHierarchyFact( child, parent;)
  or
  (ItemHierarchyFact(z, parent;) and isContainedIn( child, z, retVal; ) )
end


rule "Remove cost of bought item from wanted item, if it is contained by wanted item"
salience $price
when
	$have: BoughtItemFact(used == false, $name: name, $price: price)
	isContainedIn($name, wantedItem, $itemHierarchyObj;)
then
	drools.getKnowledgeRuntime().setGlobal("balance", balance - $price);
	delete($itemHierarchyObj);
	$have.setUsed(true);
	update($have);
end





