package rules.heroes;
 
import com.heropicker.facts.heroes.HeroBannedFact;
import com.heropicker.facts.heroes.AllyHeroPickedFact;
import com.heropicker.facts.heroes.EnemyHeroPickedFact;
import com.heropicker.facts.heroes.UpdateScoresFact;
import com.heropicker.facts.heroes.HeroPreferredFact;
import com.heropicker.facts.heroes.RolePreferredFact;
import com.heropicker.facts.heroes.LanePreferredFact;
import com.heropicker.model.heroes.PickedAllyHeroes;
import com.heropicker.model.heroes.HeroRecommendation;
import com.heropicker.model.heroes.LaneStats;
import com.heropicker.model.heroes.Hero;


global com.heropicker.model.heroes.HeroDatabase heroDatabase;
global com.heropicker.model.heroes.HeroRecommendationList heroRecommendationList;
global PickedAllyHeroes pickedAllyHeroes;

 
rule "Ally hero picked"
	agenda-group "hero-statistics"
	when
		$picked : AllyHeroPickedFact()
	then
		heroRecommendationList.removeHeroRecommendationByHeroId($picked.getHeroId());
		pickedAllyHeroes.addHero($picked.getHeroId());
end

rule "Hero banned"
	agenda-group "hero-statistics"
	when
		$banned : HeroBannedFact()
	then
		heroRecommendationList.removeHeroRecommendationByHeroId($banned.getHeroId());
end

rule "Update score by heroId"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendation(hero.heroId==$heroId) from heroRecommendationList.getHeroRecommendations()
	then
		$heroRecommendation.updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());
end

rule "Update score by role"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendation(hero.roles contains $role) from heroRecommendationList.getHeroRecommendations()
	then
		$heroRecommendation.updateScore($updateScore.getMultiplyScale(), $updateScore.getAddValue());
end

rule "Update score by lane"
	when
		$updateScore : UpdateScoresFact($heroId : heroId, $role : role, $lane : lane)
		$heroRecommendation : HeroRecommendation($hero : hero) from heroRecommendationList.getHeroRecommendations()
		$laneStats: LaneStats(name == $lane) from $hero.lanes
	then
		double laneEffectiveness = ($laneStats.getWinrate() * $laneStats.getPresence());
		$heroRecommendation.updateScore((1+laneEffectiveness)*$updateScore.getMultiplyScale(),
		 $updateScore.getAddValue());
end

query roleOverflow(String $role, Long $count)
	 $count := Number() from accumulate ($hero : Hero(roles contains $role) from pickedAllyHeroes.heroes, count($hero))
end

	rule "Pusher role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Pusher", $count;)
		then
			double penalty = (1.5 - (double)$count) * 0.05;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Pusher", null));
	end

	rule "Disabler role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Disabler", $count;)
		then
			double penalty = (2.0 - (double)$count) * 0.025;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Disabler", null));
	end

	rule "Durable role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Durable", $count;)
		then
			double penalty = (1.5 - (double)$count) * 0.05;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Durable", null));
	end

	rule "Jungler role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Jungler", $count;)
		then
			double penalty = (0.5 - (double)$count) * 0.025;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Jungler", null));
	end

	rule "Carry role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Carry", $count;)
		then
			double penalty = (2.0 - (double)$count) * 0.05;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Carry", null));
	end

	rule "Initiator role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Initiator", $count;)
		then
			double penalty = (1.5 - (double)$count) * 0.05;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Initiator", null));
	end

	rule "Support role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Support", $count;)
		then
			double penalty = (2.0 - (double)$count) * 0.05;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Support", null));
	end

	rule "Escape role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Escape", $count;)
		then
			double penalty = (1.0 - (double)$count) * 0.025;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Escape", null));
	end

	rule "Nuker role"
		agenda-group "team-composition"
		salience -1
		when
			exists(AllyHeroPickedFact())
			roleOverflow("Nuker", $count;)
		then
			double penalty = (1.0 - (double)$count) * 0.05;
			insert(new UpdateScoresFact(penalty + 1, 0, null, "Nuker", null));
	end



	rule "Enemy hero picked"
		agenda-group "hero-statistics"
		when
			$picked : EnemyHeroPickedFact()
		then
			heroRecommendationList.removeHeroRecommendationByHeroId($picked.getHeroId());
			heroRecommendationList.changeScoresByHeroDisadvantage($picked.getHeroId(), 1.5);
	end
	rule "Enemy hero picked is expected to show in my lane"
		agenda-group "hero-statistics"
		when
			$picked : EnemyHeroPickedFact(goingToFaceInLane == true)
		then
			heroRecommendationList.changeScoresByHeroDisadvantage($picked.getHeroId(), 3.0);
	end
	rule "Hero preferred"
		agenda-group "preferences"
		when
			HeroPreferredFact($heroId : heroId)
		then
			insert(new UpdateScoresFact(1.3, 0, $heroId, null, null));
	end
	rule "Role preferred"
		agenda-group "preferences"
		when
			RolePreferredFact($role : role)
		then
			insert(new UpdateScoresFact(1.3, 0, null, $role, null));
	end
	rule "Lane preferred"
		agenda-group "preferences"
		when
			LanePreferredFact($lane : lane)
		then
			insert(new UpdateScoresFact(2.0, 0, null, null, $lane));
	end



